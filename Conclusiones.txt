# Conclusiones del Ejercicio de Automatización

El ejercicio de automatización de la API de PetStore, aunque aparentemente sencillo, presentó varios desafíos que requirieron un profundo entendimiento del framework Karate y su interacción con el entorno de ejecución.

## Hallazgos y Desafíos
1.  **Inestabilidad de la API de PetStore**: La API demostró ser inconsistente, especialmente en la actualización de datos. Las peticiones de `GET` a veces devolvían datos antiguos, lo que causaba fallos en las validaciones. Este fue el principal desafío que tuvimos que superar.
2.  **Manejo de Tiempos de Respuesta**: La necesidad de esperar a que la API actualizara los datos nos obligó a implementar mecanismos de **reintento (retry)**. La solución fue usar la sintaxis `* retry until [condición]` para asegurar que la prueba esperara hasta que se cumpliera la condición de búsqueda, en lugar de usar pausas fijas.
3.  **Manejo de Errores de Sintaxis**: Se encontraron errores de tipo `TypeError: Unknown identifier: delay` y `SyntaxError: Unnamed:1:6 Expected ; but found until`. Estos errores, que no son comunes, se solucionaron al comprender que el entorno de ejecución no estaba reconociendo las funciones de Karate, lo que nos llevó a optimizar la sintaxis de las pruebas.
4.  **Validación de Arrays con JSONPath**: Las respuestas de la API a menudo devolvían un array de objetos. Se requirió el uso de **JSONPath (`karate.jsonPath()`)** para buscar y validar un objeto específico dentro de esa lista, lo que demostró ser una técnica de validación más precisa y robusta para evitar errores como `Index 0 out of bounds for length 0`.

## Conclusiones
Este ejercicio fue una excelente oportunidad para poner a prueba la flexibilidad de Karate y la capacidad de adaptar las pruebas a un entorno de API del mundo real, que no siempre es predecible. La clave para la solución fue abandonar las pausas fijas en favor de una lógica de reintento dinámico y usar técnicas de validación avanzadas para manejar las respuestas complejas de la API.

El resultado final es una suite de pruebas **robusta y estable** que no solo valida la funcionalidad de la API, sino que también maneja sus inconsistencias de manera eficiente.